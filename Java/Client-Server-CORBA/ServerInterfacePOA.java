
/**
* ServerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ServerInterface.idl
* Friday, January 3, 2025 3:40:24 PM CET
*/

public abstract class ServerInterfacePOA extends org.omg.PortableServer.Servant
 implements ServerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addResource", new java.lang.Integer (0));
    _methods.put ("removeResource", new java.lang.Integer (1));
    _methods.put ("listResourceAvailability", new java.lang.Integer (2));
    _methods.put ("requestResource", new java.lang.Integer (3));
    _methods.put ("findResource", new java.lang.Integer (4));
    _methods.put ("returnResource", new java.lang.Integer (5));
    _methods.put ("swapResource", new java.lang.Integer (6));
    _methods.put ("addToQueue", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Responder methods
       case 0:  // ServerInterface/addResource
       {
         try {
           String resourceID = in.read_string ();
           String resourceName = in.read_string ();
           int duration = in.read_long ();
           String $result = null;
           $result = this.addResource (resourceID, resourceName, duration);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // ServerInterface/removeResource
       {
         try {
           String resourceID = in.read_string ();
           int duration = in.read_long ();
           String $result = null;
           $result = this.removeResource (resourceID, duration);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // ServerInterface/listResourceAvailability
       {
         try {
           String resourceName = in.read_string ();
           String $result = null;
           $result = this.listResourceAvailability (resourceName);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Coordinator methods
       case 3:  // ServerInterface/requestResource
       {
         try {
           String coordinatorID = in.read_string ();
           String resourceID = in.read_string ();
           int duration = in.read_long ();
           String $result = null;
           $result = this.requestResource (coordinatorID, resourceID, duration);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // ServerInterface/findResource
       {
         try {
           String coordinatorID = in.read_string ();
           String resourceName = in.read_string ();
           String $result = null;
           $result = this.findResource (coordinatorID, resourceName);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // ServerInterface/returnResource
       {
         try {
           String coordinatorID = in.read_string ();
           String resourceID = in.read_string ();
           String $result = null;
           $result = this.returnResource (coordinatorID, resourceID);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // ServerInterface/swapResource
       {
         try {
           String coordinatorID = in.read_string ();
           String oldResourceID = in.read_string ();
           String oldResourceType = in.read_string ();
           String newResourceID = in.read_string ();
           String newResourceType = in.read_string ();
           String $result = null;
           $result = this.swapResource (coordinatorID, oldResourceID, oldResourceType, newResourceID, newResourceType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (ServerInterfacePackage.ResourceException $ex) {
           out = $rh.createExceptionReply ();
           ServerInterfacePackage.ResourceExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // ServerInterface/addToQueue
       {
         String clientId = in.read_string ();
         String resourceId = in.read_string ();
         this.addToQueue (clientId, resourceId);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ServerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ServerInterface _this() 
  {
    return ServerInterfaceHelper.narrow(
    super._this_object());
  }

  public ServerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return ServerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class ServerInterfacePOA
